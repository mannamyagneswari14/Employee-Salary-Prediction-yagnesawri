# -*- coding: utf-8 -*-
"""employee salary preditcion

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18iHwJJXKnX3Pgdl_Ek9iV0V8WVFeWDGu
"""

import pandas as pd
data=pd.read_csv("/content/adult 3 (1).csv")
data

data.isna().sum()

data.occupation.value_counts()

data.gender.value_counts()

data.workclass.replace({'?':'Notlisted'},inplace=True)
data.occupation.replace({'?':'Others'},inplace=True)

data.workclass.value_counts()

data=data[data['workclass']!='Without-pay']
data=data[data['workclass']!='Never-worked']
data.workclass.value_counts()

data.education.value_counts()

data=data[data['education']!='5th-6th']
data=data[data['education']!='1st-4th']
data=data[data['education']!='Preschool']
data.education.value_counts()

#redundancy
data.drop(columns=['education'],inplace=True)

data

import matplotlib.pyplot as plt
plt.boxplot(data.age)
plt.show()

data=data[(data['age']<=75)&(data['age']>=17)]
plt.boxplot(data.age)
plt.show()

#lable encoding for the data
from sklearn.preprocessing import LabelEncoder
le=LabelEncoder()
data['workclass']=le.fit_transform(data['workclass'])
data['gender']=le.fit_transform(data['gender'])
data['marital-status']=le.fit_transform(data['marital-status'])
data['occupation']=le.fit_transform(data['occupation'])
data['relationship']=le.fit_transform(data['relationship'])
data['race']=le.fit_transform(data['race'])
data['native-country']=le.fit_transform(data['native-country'])
data

x=data.drop(columns=['income'])
y=data['income']

x

y

from sklearn.preprocessing import MinMaxScaler
sc=MinMaxScaler()
x=sc.fit_transform(x)
x

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=39,stratify=y)
x_train

#ml algorithms
from sklearn.neighbors import KNeighborsClassifier
kn=KNeighborsClassifier()
kn.fit(x_train,y_train)
y_pred=kn.predict(x_test)
y_pred

from sklearn.metrics import accuracy_score
accuracy_score(y_test,y_pred)

from sklearn.linear_model import LogisticRegression
lr=LogisticRegression()
lr.fit(x_train,y_train)
y_pred1=lr.predict(x_test)
y_pred1
from sklearn.metrics import accuracy_score
accuracy_score(y_test,y_pred1)

from sklearn.tree import DecisionTreeClassifier
dt=DecisionTreeClassifier()
dt.fit(x_train,y_train)
y_pred2=dt.predict(x_test)
y_pred2
from sklearn.metrics import accuracy_score
accuracy_score(y_test,y_pred2)

from sklearn.ensemble import RandomForestClassifier
rf=RandomForestClassifier()
rf.fit(x_train,y_train)
y_pred3=rf.predict(x_test)
y_pred3
from sklearn.metrics import accuracy_score
accuracy_score(y_test,y_pred3)

from sklearn.neural_network import MLPClassifier
mlp=MLPClassifier(solver='adam',hidden_layer_sizes=(5,3),random_state=2,max_iter=3737)
mlp.fit(x_train,y_train)
y_pred4=mlp.predict(x_test)
y_pred4
from sklearn.metrics import accuracy_score
accuracy_score(y_test,y_pred4)

from sklearn.svm import SVC
sv=SVC()
sv.fit(x_train,y_train)
y_pred5=sv.predict(x_test)
y_pred5
from sklearn.metrics import accuracy_score
accuracy_score(y_test,y_pred5)

from sklearn.naive_bayes import GaussianNB
nb=GaussianNB()
nb.fit(x_train,y_train)
y_pred6=nb.predict(x_test)
y_pred6
from sklearn.metrics import accuracy_score
accuracy_score(y_test,y_pred6)

from sklearn.ensemble import GradientBoostingClassifier
gb=GradientBoostingClassifier()
gb.fit(x_train,y_train)
y_pred7=gb.predict(x_test)
y_pred7
from sklearn.metrics import accuracy_score
accuracy_score(y_test,y_pred7)

from sklearn.ensemble import AdaBoostClassifier
ab=AdaBoostClassifier()
ab.fit(x_train,y_train)
y_pred8=ab.predict(x_test)
y_pred8
from sklearn.metrics import accuracy_score
accuracy_score(y_test,y_pred8)

from sklearn.ensemble import ExtraTreesClassifier
et=ExtraTreesClassifier()
et.fit(x_train,y_train)
y_pred9=et.predict(x_test)
y_pred9
from sklearn.metrics import accuracy_score
accuracy_score(y_test,y_pred9)

from sklearn.ensemble import BaggingClassifier
bg=BaggingClassifier()
bg.fit(x_train,y_train)
y_pred10=bg.predict(x_test)
y_pred10
from sklearn.metrics import accuracy_score
accuracy_score(y_test,y_pred10)

from sklearn.ensemble import VotingClassifier
vc=VotingClassifier(estimators=[('knn', kn), ('lr', lr), ('dt', dt), ('rf', rf), ('mlp', mlp), ('svc', sv), ('nb', nb), ('gb', gb), ('ab', ab), ('et', et), ('bg', bg)])
vc.fit(x_train,y_train)
y_pred11=vc.predict(x_test)
y_pred11
from sklearn.metrics import accuracy_score
accuracy_score(y_test,y_pred11)

from os import pipe
from ast import mod
from sklearn.pipeline import Pipeline
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler
from sklearn.neighbors import KNeighborsClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.neural_network import MLPClassifier
from sklearn.svm import SVC
from sklearn.naive_bayes import GaussianNB
from sklearn.ensemble import GradientBoostingClassifier
from sklearn.ensemble import AdaBoostClassifier
from sklearn.ensemble import ExtraTreesClassifier
from sklearn.ensemble import BaggingClassifier
from sklearn.metrics import accuracy_score, classification_report

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=39,stratify=y)
models={
    "KNN":KNeighborsClassifier(),
    "LogisticRegression":LogisticRegression(),
    "DecisionTree":DecisionTreeClassifier(),
    "RandomForest":RandomForestClassifier(),
    "MLPClassifier":MLPClassifier(),
    "SVC":SVC(),
    "GaussianNB":GaussianNB(),
    "GradientBoosting":GradientBoostingClassifier(),
    "AdaBoost":AdaBoostClassifier(),
    "ExtraTrees":ExtraTreesClassifier(),
    "Bagging":BaggingClassifier()
}
results={}
for model_name,model in models.items():
  pipe=Pipeline([
      ('scaler',MinMaxScaler()),
      ('model',model)
  ])
  pipe.fit(x_train,y_train)
  y_pred=pipe.predict(x_test)
  results[model_name]=accuracy_score(y_test,y_pred)
  print(f"{model_name} Accuracy: {results[model_name]}")
  print(classification_report(y_test,y_pred))

import matplotlib.pyplot as plt
plt.bar(results.keys(),results.values(),color='blue')
plt.ylabel('Accuracy')
plt.xlabel('model')
plt.xticks(rotation=90)
plt.title('Accuracy of Different Models')
plt.grid(True)
plt.show()

import joblib
best_model_name = max(results, key=results.get)
print(f" Best Model: {best_model_name} with Accuracy: {results[best_model_name]:.4f}")
best_model = models[best_model_name]
final_pipe = Pipeline([
    ('scaler', MinMaxScaler()),
    ('model', best_model)
])
final_pipe.fit(x_train, y_train)
joblib.dump(final_pipe, 'best_model.pkl')
print("Model saved as 'best_model.pkl'")